const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const fs = require('fs-extra');
const path = require('path');

// Path to WhatsApp's hidden statuses folder
const STATUS_FOLDER = '/path/to/WhatsApp/Media/.Statuses'; // Update this to match your system
const TEMP_FOLDER = path.join(__dirname, 'temp'); // Temporary storage folder for statuses

// Initialize the bot client
const client = new Client({
    authStrategy: new LocalAuth(),
});

// Ensure the temp folder exists
if (!fs.existsSync(TEMP_FOLDER)) {
    fs.mkdirSync(TEMP_FOLDER);
}

// Log QR code for first-time login
client.on('qr', (qr) => {
    console.log('Scan the QR code to log in:');
});

// Log when the bot is ready
client.on('ready', () => {
    console.log('WhatsApp bot is ready and logged in!');
    
    // Keep sending typing status to simulate activity
    setInterval(async () => {
        try {
            // Send typing status to the bot creator (or any group)
            await client.sendStateTo('your-phone-number@c.us', 'typing');  // Replace with actual phone number
        } catch (err) {
            console.error('Error simulating typing:', err);
        }
    }, 10000);  // Simulate typing every 10 seconds (adjust as needed)
});

// Handle incoming messages
client.on('message', async (message) => {
    console.log(`Received message: ${message.body}`);

    // Handle .save command
    if (message.body.toLowerCase() === '.save') {
        try {
            // Check if the statuses folder exists
            if (!fs.existsSync(STATUS_FOLDER)) {
                await message.reply("Sorry, I couldn't find the statuses folder. Make sure it's accessible.");
                return;
            }

            // Get the latest status files
            const statusFiles = fs.readdirSync(STATUS_FOLDER).filter((file) =>
                /\.(jpg|jpeg|png|mp4)$/i.test(file) // Filter for image and video statuses
            );

            if (statusFiles.length === 0) {
                await message.reply("No statuses found to save!");
                return;
            }

            // Copy the latest status to the temp folder
            const latestStatus = statusFiles[statusFiles.length - 1];
            const statusPath = path.join(STATUS_FOLDER, latestStatus);
            const tempStatusPath = path.join(TEMP_FOLDER, latestStatus);

            fs.copyFileSync(statusPath, tempStatusPath);

            // Send the status to the user
            const media = MessageMedia.fromFilePath(tempStatusPath);
            await message.reply(media);
            await message.reply(`Status sent by Qin, created by Awusi Yaqin.`);
            await message.react('✅');

            // Clean up the temp file
            fs.unlinkSync(tempStatusPath);
        } catch (err) {
            console.error('Error saving status:', err);
            await message.reply("An error occurred while saving the status. Please try again.");
        }
    }

    // Handle .menu or similar commands to show bot name and creator
    else if (message.body.toLowerCase() === '.menu') {
        await message.reply(`Hello! I am *Qin*, the bot created by *Awusi Yaqin*.\n\nYou can use the following commands:\n- .save: Save the latest status\n- .menu: Display this menu`);
        await message.react('📋');
    }

    // Handle unknown commands
    else {
        await message.reply("I didn't understand that. Type `.menu` for available commands.");
        await message.react('❓');
    }
});

// Handle errors
client.on('auth_failure', (msg) => {
    console.error('Authentication failure:', msg);
});

client.on('disconnected', (reason) => {
    console.log('Client was disconnected:', reason);
});

// Start the bot
client.initialize();
